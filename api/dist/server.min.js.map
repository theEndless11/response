{"version":3,"sources":["server.js"],"names":["express","require","mongoose","cors","Ably","port","process","env","PORT","connect","MONGO_URI","useNewUrlParser","useUnifiedTopology","then","err","console","log","app","use","json","Message","Realtime","key","ABLY_API_KEY","publicChannel","ably","channels","get","message","newMessage","regeneratorRuntime","async","_context","prev","next","text","data","awrap","t0","stop","req","res","messages","_context2","find","sort","timestamp","sent","error","status","module","exports"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,SAAWD,QAAQ,YADnBD,KAAOC,QAAU,QAGjBE,KAAOF,QAAQ,QAFrBA,QAAMC,UAAWD,SACjB,IAAMG,IAAOH,UAKPI,KAAOC,QAAQC,IAAIC,MAAQ,IAHjCP,SAAQQ,QAARH,QAAAC,IAA4BG,UAAA,CAOxBC,iBAAiB,EACjBC,oBAAoB,IALxBC,KAAMR,WAAAA,OAAOC,QAAQC,IAAIC,uBAHzBP,MAWO,SAAAa,GAAG,OAAIC,QAAQC,IAAI,4BAA6BF,KAHnDF,IAAAA,QAAAA,QAAoB,aAElBK,IAJNC,IAAAlB,QAKOmB,QAAGF,IAAAC,IAAAf,QAGV,IAAMiB,KAAO,IAAGnB,KAAQoB,SAAA,CAADC,IAAgBhB,QAAAC,IAAAgB,eAEvCC,cAAAC,KAAAC,SAAAC,IAAA,QACAV,cAAQjB,UAAR,UAAA,SAAA4B,GAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OACQ/B,EAER,IAAAiB,QAAA,CAAAe,KAAAP,EAAAQ,KAAAD,OAHAH,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAO,MAIaR,EAASR,QAJtB,KAAA,EAIsCf,QAAQC,IAAIgB,uBAAAA,EAAAA,KAAAA,MAJlDS,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,MAAA,GAKMR,QAAAA,MAAgBC,8BAAhBD,EAAAA,IALN,KAAA,GAAA,IAAA,MAAA,OAAAQ,EAAAO,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAQmCtB,IAAAU,IAAA,YAAA,SAAAa,EAAAC,GAAA,IAAAC,EAAA,OAAAZ,mBAAAC,MAAA,SAAAY,GAAA,OAAA,OAAAA,EAAAV,KAAAU,EAAAT,MAAA,KAAA,EAAA,OAAAS,EAAAV,KAAA,EAAAU,EAAAT,KAAA,EAAAJ,mBAAAO,MAAAjB,QAAAwB,OAAAC,KAAA,CAAAC,WAAA,KAAA,KAAA,EAAAJ,EAAAC,EAAAI,KACzBlB,QAAAA,IADyB,4BACAa,GAAEP,EAAAA,KAAIO,GADNC,EAAAT,KAAA,GAAA,MAAA,KAAA,EAAAS,EAAAV,KAAA,EAAAU,EAAAL,GAAAK,EAAA,MAAA,GAAA5B,QAAAiC,MAAA,2BAAAL,EAAAL,IAAAG,EAAAQ,OAAA,KAAA9B,KAAA,CAAA6B,MAAA,6BAAA,KAAA,GAAA,IAAA,MAAA,OAAAL,EAAAJ,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAtB,IAAAC,IAAAlB,QAAA,OAAA,WAAAkD,OAAAC,QAAAlC","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst Ably = require('ably');\r\nconst cors = require('cors');\r\nrequire('dotenv').config(); // To load environment variables from .env file\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// MongoDB connection using environment variable\r\nmongoose.connect(process.env.MONGO_URI, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n})\r\n.then(() => console.log('MongoDB connected'))\r\n.catch(err => console.log('MongoDB connection error:', err));\r\n\r\n// Import the Message model\r\nconst Message = require('./message');  // Import schema from message.js\r\n\r\n// Use middleware\r\napp.use(express.json());\r\napp.use(cors());\r\n\r\n// Initialize Ably with API Key from environment variable\r\nconst ably = new Ably.Realtime({ key: process.env.ABLY_API_KEY });\r\nconst publicChannel = ably.channels.get('chat');\r\n\r\n// Listen for new messages on the public chat and save them to MongoDB\r\npublicChannel.subscribe('message', async (message) => {\r\n    const newMessage = new Message({ text: message.data.text });\r\n    try {\r\n        await newMessage.save();\r\n        console.log('Message saved to DB:', message.data.text);\r\n    } catch (err) {\r\n        console.error('Error saving message to DB:', err);\r\n    }\r\n});\r\n\r\n// API to get all messages from the MongoDB database\r\napp.get('/messages', async (req, res) => {\r\n    try {\r\n        const messages = await Message.find().sort({ timestamp: -1 });\r\n        console.log('Fetched messages from DB:', messages); // Log fetched messages\r\n        res.json(messages);\r\n    } catch (err) {\r\n        console.error('Error fetching messages:', err);\r\n        res.status(500).json({ error: 'Failed to fetch messages' });\r\n    }\r\n});\r\n\r\n// Serve static files (HTML, JS, etc.) - if you have them in a public folder\r\napp.use(express.static('public'));\r\n\r\n// Vercel Serverless Function (For deployment on Vercel)\r\nmodule.exports = app;\r\n\r\n\r\n"]}